ActivePerl Business Edition
---------------------------

The plan is to only make the latest ActivePerl 8xx and 10xx for Windows, Mac OS
X and Linux freely available.  Older releases and releases for other platforms
requires a business edition license (called BE-license below) with a valid
subscription.

An installed BE-license contains enough information to identify the user, but
not information specifying the time period the license is valid.  This
information is only available server side.  The reason for this is that we want
users to be able to renew their license without having to install anything on
their clients.

A BE-license can be shared between multiple machines and the subscription does
not select specific platforms as supported or not.  You either have a valid BE
subscription or not.

There will not be separate builds of ActivePerl for users with a BE-license.
The ActivePerl package will adapt based on the presence of the license on the
client machine where it runs.

There will be separate PPM repos for the free ActivePerl and for those with the
BE-license.  The free repos will only contain the latest build of each
distribution and support for the latest version of the 2 newest release series
of ActivePerl.  There will only be free repos for Windows x86_32 and x86_64,
Mac OS X and Linux x86_32 and x86_64 (64-bit builds only for Perl 5.10).  The
free repos will be a strict subset of the corresponding BE-repos.

The current ppm repo lives under http://ppm4.activestate.com.  The BE repo will
live at http://ppm4-be.activestate.com.  Users will have to log in (using our
single-signon system) to browse the BE site with a regular browser.  Users
without a BE-license will not be given access.

Build logs and ppmx files will also be restricted in the free repo to only
contain the last build on the freely supported platforms.


Scenarios:

  - Free ActivePerl (BE aware) installed on a machine
      (a) user installs BE-license
      (b) BE-license subscription expires
      (c) BE-license subscription renewed

  - Free ActivePerl (old version) installed on a machine
      (d) BE rules introduced

  - Previously free ActivePerl installed on a machine (eg Solaris)
      (e) BE rules introduced

  - BE-license and non-free ActivePerl installed 
      (f) BE-license subscription expires
      (g) BE-license subscription renewed

  - BE-license installed
      (h) ActivePerl installed


Discussion:

(a) In this case 'ppm repo 1' will initially be the standard "ActiveState Package
Repository" pointing to http://ppm4.activestate.com/darwin/5.10/1006/package.xml
or some such.

If the user starts the ppm client it will discover that the BE-license has been
installed and will ask the user "Do you want to upgrade to the BE-repo?" (a
dialog in GUI mode and a terminal prompt in command line mode).  If the user
confirms then repo 1 is deleted and 'ppm repo add
http://ppm4-be.activestate.com/darwin/5.10/1006/package.xml "ActiveState
Business Edition Repo"' takes its place and the repo is synced.
[jand: The code must handle the case where the new repo turns out not to
be accessible.]

If the user declines then ppm remembers this fact and will not prompt again.
The user continues to use the free repo.

The 'ppm repo suggest' will list 'activestate-be' as an option and the user
can add this repo manually at any time if she desires.  This option is only
available when 'ppm' detects the presence of a BE-license on the system.
The 'ppm repo suggest' still lists 'activestate' as before.


(b) If the subscription expires and the user has configured the BE-repo to be
current then the next "ppm repo sync" or fetching a package during install will
fail with "403 Forbidden" status.  The status line message that goes with this
should explain that the subscription has expired and this will be displayed in
the 'ppm repo desc' output.

The ppm client will provide additional information to the user about the
procedure for how to renew the subscription.  The instructions might be carried
as body in the "403 response" message so we avoid the need to hardcode these
instructions in the client itself.

For the command line client it outputs the reminder about how to renew each
time it runs as long as the "403 Forbidden" status remains for the enabled
repo.  To disable this message disable or remove the BE repo.

For the GUI the reminder is presented in a dialog box each time ppm starts up.
The GUI dialog will have a "[X] Remind me later" checkbox that can be disabled
to suppress this message.  [gisle: might just be some option that disabled the
403 repo so we don't have to store a seperate state bit for this].

The user will manually have to invoke 'ppm repo del' and 'ppm repo add
activestate' to re-enable the free repository if no desire to renew the
BE-subscription exists and the desire to continue to keep the perl up-to-date
does.

ActivePerl and the modules already installed continue to work as before
regardless of subscription status.


(c) If the BE-repo is still enabled then the next 'ppm repo sync' will just start
working again.

If the BE-repo has been manually disabled then it would have to be manually
enabled again.

[jand: Do we want to just "ping" the BE-repo every time we sync the regular
repo to see if the user renewed their subscription?]

[gisle: something like: if the user has the BE-license and the corresponding
BE-repo has been disabled and the 'HTTP status' from the last attempt was '403'
and last attempt was more than 1 day ago: at startup ppm will perform a
HEAD-request on the packlist-URL to determine if '403' is still the case.  The
response updates the status and timestamp of the last request; but the repo
remains disabled.  If the status goes from '403' to '200' then a message about
this fact is presented to the user.]

(d) The free ActiveState repos that the old perl has configured might disappear.

Running 'ppm repo sync' or module install will get a "404 Not Found" error
response.  The status line message will be stored and 'ppm repo desc' will show
that.

[jand: I thought the disappearing repo was case (e), and case (d) would just
continue to work as always.  This situation is now the same as in case (b)
after the user disabled the activeperl-be repo and switched back to activeperl.]

[gisle: in case (b) we have an enhanced client that can inform the user about
how to renew.  This scenario is about how ActivePerl 826 will behave after we
decide that the free repos will not have 8xx builds in them any more.]


(e) The free ActiveState repos goes away and packlist-URL starts returning 404.

This is the same situation as (d) and the client will behave in the same way.
It is after all the pre-introduction-of-BE-client we are talking about here.

Only difference is that we should try to make the server produce a different
error message for these kind of users.  In the (d) case it helps to just upgrade
to a newer version of ActivePerl to again get module updates. In this case you
need to buy a BE-license if you want updates for this platform.


(f) + (g)  This is basically the same situation as (b) and (c) above, but since
there is no free repo to fall back on the error messages should be different.

The error message in this case should not say that you might run 'ppm repo add
activestate' and disable the BE-repo.


(h) If a BE-license is found the first time ppm runs it will set up repo 1
to be the BE-repo instead of the free repo.  This differs from case (a) by
not asking the user if she wants to upgrade to the BE-repo.

The repo will not be accessed until the first sync.  If ppm at that point
get a 403 errror we are in the same situation as (b).

The 'ppm repo suggest' still has an entry for the free repo so the user can
easily downgrade to the free repo if she wants that.



Tasks:
------

This lists tasks for how to change ActiveState-PPM to support the scenarios
described above:

- upgrade schema (sqlite database) to store more state:
    - store body of failed http responses (used to capture the 403
      text containing the information about how to renew)
    - store "be-upgrade-refused" state (boolean).

- additional checks done during startup of the ppm client:
    - determine the presence of a BE-license

    - if PPM database not initialized yet:
	- set up initial 'activestate' or 'activestate-be' (selected
	  by the presence of BE-license or not)

    - if BE-license present:
	- add 'activeperl-be' to the 'repo suggest' list (same URL as the
	  standard repo but with "-be" inserted before ".activestate.com"
	- if not "be-upgrade-refused":
	    - if not 'activeperl-be' configured as repo:
		- ask if it should not be?
		    yes: set it up and sync
		    no: ask remind me later --> sets 'be-upgrade-refused' flag
	- all http requests to 'activeperl-be' include credentials from
	  the BE-license.  Requests for other domains don't contain these
	  credentials.

    - if any repo has "403" status show the corresponding message

- GUI version of the messages and dialogs above

- 'ppm repo sync':
    - store response content if not "200 OK" response from server and
      content-type is text/plain
    - if status becomes "403" display content message
