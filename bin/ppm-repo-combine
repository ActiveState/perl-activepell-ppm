#!/usr/bin/env perl

use strict;
use warnings;

# TODO:
#  - merge PPDs
#  - download HREFs (create standalone directory)
#  - output relative links instead of file:/// links so that
#    the file can be published as is

use Getopt::Long qw(GetOptions);
use LWP 5.820;
use URI;
use URI::file;

GetOptions(\my %opt,
    'base=s',
    'sort',
) || usage();
usage() unless @ARGV;

my $base = $opt{base} ? URI->new($opt{base}) : URI::file->cwd;

my $ua = LWP::UserAgent->new(
    keep_alive => 1,
    show_progress => 1,
);

#print "BASE: $base\n";

my @ppd;
while (@ARGV) {
    my $url = shift;
    my $res = $ua->get(URI->new_abs($url, $base));
    if (my $len = $res->content_length) {
	if (length($res->content) != $len) {
	    warn "incomplete download, skipping";
	    next;
	}
    }
    next unless $res->is_success;
    if ($res->content_type =~ m,^application/(x-)?gzip$,) {
        # tweak response so that 'decoded_content' will decode it
        $res->content_type("application/octet-stream");
        $res->push_header("Content-Encoding", "gzip");
    }
    $res->decode;
    my $cref = $res->content_ref;

    if ($res->content_is_html) {
	my $base = $res->base;
	my @href;
	require HTML::Parser;
	my $p = HTML::Parser->new(
	    report_tags => [qw(a)],
	    start_h => [sub {
		my $href = shift->{href} || return;
		push(@href, URI->new_abs($href, $base)) if $href =~ /\.ppd$/;
	    }, "attr"],
	);
	$p->parse($$cref)->eof;
	if (@href) {
	    warn "Following " . scalar(@href) . " PPD links";
	    unshift(@ARGV, @href);
	}
	else {
	    warn "HTML resource without PPD links, skipping";
	}
	next;
    }

    unless ($$cref =~ /<SOFTPKG\s/) {
	warn "contains no PPDs, skipping";
	next;
    }
    my $arch;
    my $base = $res->base;
    if ($$cref =~ /<REPOSITORYSUMMARY(\s[^>]*)>/s) {
	my $attr = $1;
	while ($attr =~ /\G\s+(\w+)\s*=\s*"([^"]*)"/g) {
	    if ($1 eq "ARCHITECTURE") {
		$arch = $2;
	    }
	    elsif ($1 eq "BASE") {
		$base = URI->new($2);
	    }
	}
    }
    my @pkgs = ($$cref =~ /(<SOFTPKG\s.*?<\/SOFTPKG\s*>)/gs);
    for (@pkgs) {
	$_ = PPD->new($_, $base, $arch);
    }
    push(@ppd, @pkgs);
}

print STDERR scalar(@ppd), " packages found\n";

my $summary_base;
if (1) {
    # If we can find a common base URL for all the links we
    # can shorten the file by using relative links
    my @href;
    for my $p (@ppd) {
	push(@href, $p->links);
    }
    if ($summary_base = common_base_url(@href)) {
	for my $p (@ppd) {
	    $p->edit_links(sub{ s/^\Q$summary_base//o });
	}
    }
}

#use Data::Dump; dd @ppd;
if ($opt{sort}) {
    @ppd =
        map $_->[-1],
	sort { $a->[0] cmp $b->[0] }
	map [lc($_->name_version), $_], @ppd;
}

print qq(<?xml version="1.0" encoding="UTF-8"?>\n);
print "<REPOSITORYSUMMARY";
print qq( BASE="$summary_base") if $summary_base;
print ">\n";
for (@ppd) {
    print $_->as_xml, "\n";
}
print "</REPOSITORYSUMMARY>\n";
exit;

sub common_base_url {
    my $base = longest_common_prefix(@_);
    if ($base) {
	$base =~ s,[^/]+\z,,;
	$base = "" unless $base =~ m,//[^/]*/,;
    }
    return $base;
}

sub longest_common_prefix {
    return "" unless @_;
    my $prefix = shift;
    for (@_) {
	chop $prefix while substr($_, 0, length $prefix) ne $prefix;
	last unless length $prefix;
    }
    return $prefix;
}

BEGIN {
    package PPD;

    sub new {
	my($class, $xml, $base, $arch) = @_;
	my $self = bless \$xml, $class;

	# absolutize all the HREFs
	$self->edit_links(sub { $_ = URI->new_abs($_, $base); });

	# set ARCHITECTURE if this came from a non-standard context
	$arch ||= "noarch";
	if ($arch ne "noarch" && $$self !~ /<ARCHITECTURE/) {
	    $self->push_elem(qq(<ARCHITECTURE NAME="$arch"/>));
	}

	$self;
    }

    sub name {
	my $self = shift;
	my($name, undef) = $self->name_version;
	return $name;
    }

    sub name_version {
	my $self = shift;
	return unless $$self =~ /^<SOFTPKG(\s[^>]+)/;
	my $attr = $1;
	my($name, $version);
	$name = $1 if $attr =~ /\sNAME\s*=\s*"([^"]*)"/;
	$version = $1 if $attr =~ /\sVERSION\s*=\s*"([^"]*)"/;
	return ($name, $version) if wantarray;
	$name .= "-$version" if defined($version);
	return $name;
    }

    sub links {
	my $self = shift;
	my @href = $$self =~ /\sHREF\s*=\s*"([^"]*)"/g;
	return @href;
    }

    sub edit_links {
	my($self, $cb) = @_;
	local $_;
	$$self =~ s{(\sHREF\s*=\s*)"([^"]*)"}{
	    $_ = $2;
	    &$cb;
            qq($1"$_");
        }ge;
    }

    sub indent {
	my $self = shift;
	return $1 if $$self =~ /^(\s+)<AUTHOR/m;
	return "";
    }

    sub push_elem {
	my($self, $xml) = @_;
	if (my $indent = $self->indent) {
	    $xml =~ s/^/$indent/g;
	}
	$$self =~ s,(</SOFTPKG\s*>\z),$xml\n$1,;
    }

    sub as_xml {
	my $self = shift;
	return $$self;
    }
}

sub usage {
    (my $progname = $0) =~ s,.*/,,;
    die "Usage: $progname [options] URL...\n";
}

__END__

=head1 NAME

ppm-repo-combine - Generate combined package.xml file

=head1 SYNOPSIS

B<ppm-repo-combine> [ B<--base> I<URL> ] I<URL>...

=head1 DESCRIPTION

The B<ppm-repo-combine> script takes a list of URLs to F<package.xml>
or F<*.ppd> files on the command line.  The files are fetched, links
rewritten and all the PPDs combined into a single F<package.xml> file
that is printed on STDOUT.

Typical usage might be something like:

  ppm-repo-combine $(find . -name \*.ppd) >package.xml

For each URL that reference an HTML document, all the links to F<.ppd>
files will be followed and incorporated in the output file.  This is
useful as it allows us to create F<package.xml> files from web server
generated directory index pages.  Links to C<package.xml> files are
ignored.

Local directories are also treated the same way, that is all F<*.ppd>
files contained in them are incorporated (but F<*.ppd> files in
sub-directories are not).

The following options are recognized:

=over

=item B<--base> I<URL>

Set the base URL used for resolving relative URLs.  It defaults to the
C<file:> URL denoting the current directory, which means that local
relative file name are interpreted in the obvious way.

=item B<--sort>

Output the packages in sorted order.  Packages are first ordered by name
and then by version numbers.

=back

=head1 SEE ALSO

L<ppm>, L<ActivePerl::PPM::PPD>
